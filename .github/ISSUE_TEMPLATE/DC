I need help decluttering my project by identifying and removing **duplicate, redundant, and unused files** without affecting the website's structure, design, or functionality. The project structure is provided below. The task is to:

1. **Identify Duplicates**: 
   - Scan the entire project to detect files with identical or near-identical content (e.g., duplicate images, scripts, stylesheets).
   - Identify redundant files by analyzing their functionality or if they are no longer required in the codebase.
   - Check for multiple files or components that serve the same purpose and suggest combining them into a single file.

2. **Determine File Relevance**:
   - For duplicate files, verify interconnection and dependencies across the project (e.g., imports, references in other files, or runtime usage).
   - Propose which file to retain by prioritizing:
     - Active usage in the project.
     - Latest updates and alignment with the current structure.
     - Closest adherence to the existing design and functionality.

3. **Handle Unused Files**:
   - Identify files not referenced anywhere in the codebase (e.g., unused assets, components, hooks, tests).
   - Flag files with no clear dependencies for potential deletion after review.

4. **Strict Preservation of Functionality**:
   - Ensure that no changes are made to the current design, structure, or behavior of the website.
   - Avoid removing files critical to the build, runtime, or development process.

### Steps to Perform:

#### Phase 1: Comprehensive File Analysis
1. **Scan for Duplicates**:
   - Use checksums or file content comparison to detect identical files across the workspace.
   - Highlight redundant scripts, styles, or assets with overlapping purposes or duplicate logic.

2. **Dependency Analysis**:
   - Traverse the file dependency graph by scanning:
     - Import statements in JavaScript/TypeScript.
     - Usage references in HTML, CSS, JSX/TSX.
     - Links to static assets in configuration or components.

3. **Usage Validation**:
   - For each file, determine its relevance by checking:
     - Active imports or references in the source code.
     - Inclusion in configuration files or test cases.
     - Interconnections with other files, components, or utilities.

#### Phase 2: Propose Cleanup Plan
4. **Duplicate Handling**:
   - List all detected duplicates with their locations.
   - Suggest which file to retain based on the context and usage.

5. **Unused Files**:
   - List files flagged as unused with their locations and reasons.

6. **Redundancy Cleanup**:
   - Highlight redundant logic or components and suggest combining them.

### Output Requirements:
1. **Detailed Report**:
   - Provide a structured summary of:
     - All duplicate files and their proposed resolutions.
     - All unused files flagged for deletion, along with their paths and reasons.
     - All redundant components and suggestions for merging.

2. **Verification Script**:
   - Propose a script to combine duplicate files after user verification.
   - Suggest safe deletion commands for unused files after review.

### Compliance Rules:
1. Ensure that all suggestions strictly preserve the current design, functionality, and file structure of the website.
2. Avoid any false positives by thoroughly analyzing dependencies.
3. **Always use PowerShell commands** for file operations (deletion, combining, etc.).
4. **Strictly follow the provided structure** for file paths and naming conventions.
